{"accuracy": 0.745, "correct_count": 298, "total_count": 400}
{"id": 4, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 73. Expected one of [-3]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[algebra.quadratic_roots(a=1, b=73, c=2)]", "model_result_decoded": [{"algebra.quadratic_roots": {"a": 1, "b": 73, "c": 2}}], "possible_answer": {"algebra.quadratic_roots": {"a": [1], "b": [-3], "c": [2]}}}
{"id": 6, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 11. Expected one of [-11]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[solve_quadratic(a=3, b=11, c=4)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": 11, "c": 4}}], "possible_answer": {"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["", "real"]}}}
{"id": 14, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "[calculate_area_under_curve(function='x^2', interval=[1, 3], method='trapezoidal')]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x^2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 16, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_x': 2. Expected one of [-2]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "function": {"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "integer", "description": "The starting x-value to integrate over."}, "end_x": {"type": "integer", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}}, "model_result_raw": "[integrate(function='x^3', start_x=2, end_x=3, method='simpson')]", "model_result_decoded": [{"integrate": {"function": "x^3", "start_x": 2, "end_x": 3, "method": "simpson"}}], "possible_answer": {"integrate": {"function": ["x^3", "x**3"], "start_x": [-2], "end_x": [3], "method": ["simpson"]}}}
{"id": 27, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duration': 120. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "integer", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}}, "model_result_raw": "[calculate_velocity(distance=50, duration=120)]", "model_result_decoded": [{"calculate_velocity": {"distance": 50, "duration": 120}}], "possible_answer": {"calculate_velocity": {"distance": [50], "duration": [2], "unit": ["", "km/h"]}}}
{"id": 36, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": "[vegan_restaurant.find_nearby(location='New York, NY', operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 37, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'destination': 'Washington D.C.)'. Expected one of ['Washington D.C.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the shortest driving distance between New York City and Washington D.C.", "function": {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}}, "model_result_raw": "[get_shortest_driving_distance(origin='New York City', destination='Washington D.C.)')]", "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York City", "destination": "Washington D.C.)"}}], "possible_answer": {"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}}
{"id": 49, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'mass': 50. Expected one of [45]."], "error_type": "value_error:others", "prompt": {"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}}, "model_result_raw": "[calculate_density(mass=50, volume=15)]", "model_result_decoded": [{"calculate_density": {"mass": 50, "volume": 15}}], "possible_answer": {"calculate_density": {"mass": [45], "volume": [15], "unit": ["", "kg/m\u00b3"]}}}
{"id": 54, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'DNA_id': '`DNA123`'. Expected one of ['DNA123']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve the sequence of DNA molecule with id `DNA123`.", "function": {"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}}, "model_result_raw": "[fetch_DNA_sequence(DNA_id='`DNA123`', format='')]", "model_result_decoded": [{"fetch_DNA_sequence": {"DNA_id": "`DNA123`", "format": ""}}], "possible_answer": {"fetch_DNA_sequence": {"DNA_id": ["DNA123"], "format": ["", "fasta"], "upstream": ["", 0]}}}
{"id": 62, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 68. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "[diabetes_prediction(weight=150, height=68, activity_level='lightly active')]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 68, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}}
{"id": 69, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '.Comma separated string representing Yellowstone National Park'. Expected one of ['Yellowstone National Park']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact.", "function": {"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}}, "model_result_raw": "[forest_growth_forecast(location='.Comma separated string representing Yellowstone National Park', years=5, include_human_impact=True)]", "model_result_decoded": [{"forest_growth_forecast": {"location": ".Comma separated string representing Yellowstone National Park", "years": 5, "include_human_impact": true}}], "possible_answer": {"forest_growth_forecast": {"location": ["Yellowstone National Park"], "years": [5], "include_human_impact": [true]}}}
{"id": 75, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duration': 3600. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours.", "function": {"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}}, "model_result_raw": "[calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=1, duration=3600, generation_time=1200)]", "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 1, "duration": 3600, "generation_time": 1200}}], "possible_answer": {"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}}
{"id": 76, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'current_population': 50000. Expected one of [35000]."], "error_type": "value_error:others", "prompt": {"question": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "dict", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "float", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}}, "model_result_raw": "[elephant_population_estimate(current_population=50000, growth_rate=0.015, years=5)]", "model_result_decoded": [{"elephant_population_estimate": {"current_population": 50000, "growth_rate": 0.015, "years": 5}}], "possible_answer": {"elephant_population_estimate": {"current_population": [35000], "growth_rate": [0.015], "years": [5]}}}
{"id": 83, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 84, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord1': [33.4484, 112.074]. Expected one of [[[33.4484, -112.074], [33.4484, 112.074]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "function": {"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}}, "model_result_raw": "[calculate_distance(coord1=[33.4484, 112.074], coord2=[34.0522, 118.2437], unit='miles')]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, 112.074], "coord2": [34.0522, 118.2437], "unit": "miles"}}], "possible_answer": {"calculate_distance": {"coord1": [[[33.4484, -112.074], [33.4484, 112.074]]], "coord2": [[34.0522, -118.2437], [34.0522, 118.2437]], "unit": ["miles"]}}}
{"id": 88, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 89, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight_kg': 59. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "function": {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "integer", "description": "The weight of the person in kilograms."}, "height_m": {"type": "float", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}}, "model_result_raw": "[calculate_BMI(weight_kg=59, height_m=1.75)]", "model_result_decoded": [{"calculate_BMI": {"weight_kg": 59, "height_m": 1.75}}], "possible_answer": {"calculate_BMI": {"weight_kg": [70], "height_m": [1.75]}}}
{"id": 92, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': ''. Expected one of ['open on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine='sushi', location='Boston', condition='')]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": ""}}], "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays"]}}}
{"id": 95, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'user_id': 523. Expected one of [43523]."], "error_type": "value_error:others", "prompt": {"question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}}, "model_result_raw": "[update_user_info(user_id=523, update_info={'name': 'John Doe', 'email': 'johndoe@email.com'})]", "model_result_decoded": [{"update_user_info": {"user_id": 523, "update_info": {"name": "John Doe", "email": "johndoe@email.com"}}}], "possible_answer": {"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}}
{"id": 97, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operation': '>'. Expected one of ['=']."], "error_type": "value_error:dict_value", "prompt": {"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}}, "model_result_raw": "[database.query(table='user', conditions=[{'field': 'age', 'operation': '>', 'value': '25'}, {'field': 'job', 'operation': '>', 'value': 'engineer'}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": ">", "value": "engineer"}]}}], "possible_answer": {"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}}
{"id": 100, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'end_range'. Expected type float, got int. Parameter value: 2."], "error_type": "type_error:simple", "prompt": {"question": "data/gorilla_openfunctions_v1_test_simple.json", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "integer", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2, frequency=1000)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2, "frequency": 1000}}], "possible_answer": {"plot_sine_wave": {"start_range": [0], "end_range": [6.283185307179586], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 102, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 15743. Expected one of [450]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}}, "model_result_raw": "[calculate_speed(distance=15743, time=720000, to_unit='km/h')]", "model_result_decoded": [{"calculate_speed": {"distance": 15743, "time": 720000, "to_unit": "km/h"}}], "possible_answer": {"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}}
{"id": 103, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'miles'. Expected one of ['mi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the distance in milesfrom the Earth to the Moon?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "dict", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'km'."}}, "required": ["body1", "body2"]}}}, "model_result_raw": "[calculate_distance(body1='Earth', body2='Moon', unit='miles')]", "model_result_decoded": [{"calculate_distance": {"body1": "Earth", "body2": "Moon", "unit": "miles"}}], "possible_answer": {"calculate_distance": {"body1": ["Earth"], "body2": ["Moon"], "unit": ["mi"]}}}
{"id": 104, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 113, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_outcomes': 13. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}}, "model_result_raw": "[calculate_probability(total_outcomes=13, favorable_outcomes=4)]", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 13, "favorable_outcomes": 4}}], "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 119, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'array_1'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"question": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "function": {"name": "stats.t_test", "description": "Perform a two-sample t-test for two given arrays.", "parameters": {"type": "dict", "properties": {"array_1": {"type": "array", "items": {"type": "integer"}, "description": "First array of data."}, "array_2": {"type": "array", "items": {"type": "integer"}, "description": "Second array of data."}, "alpha": {"type": "float", "description": "Significance level for hypothesis testing."}}, "required": ["array_1", "array_2", "alpha"]}}}, "model_result_raw": "[stats.t_test(array_1=[10, 15, 12, 14, 11], array_2=[18, 16, 17, 20, 22], alpha=0.05)]", "model_result_decoded": [{"stats.t_test": {"array_1": [10, 15, 12, 14, 11], "array_2": [18, 16, 17, 20, 22], "alpha": 0.05}}], "possible_answer": {"stats.t_test": {"array": [[10, 15, 12, 14, 11]], "array_2": [[18, 16, 17, 20, 22]], "alpha": [0.05]}}}
{"id": 123, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[10, 20, 30, 40])]", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40]}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 131, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cash_flows': [50000, 10000, 15000, 20000, 25000, 30000]. Expected one of [[-50000, 10000, 15000, 20000, 25000, 30000]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "function": {"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "A list of cash flows."}, "discount_rate": {"type": "float", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "integer"}, "description": "A list of years when the cash flow occurs. Default is empty array."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "[finance_calculator.npv(cash_flows=[50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08)]", "model_result_decoded": [{"finance_calculator.npv": {"cash_flows": [50000, 10000, 15000, 20000, 25000, 30000], "discount_rate": 0.08}}], "possible_answer": {"finance_calculator.npv": {"cash_flows": [[-50000, 10000, 15000, 20000, 25000, 30000]], "discount_rate": [0.08], "years": ["", []]}}}
{"id": 134, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_years': 37. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"question": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding.", "function": {"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}}, "model_result_raw": "[finance.predict_future_value(present_value=5000, annual_interest_rate=0.05, time_years=37)]", "model_result_decoded": [{"finance.predict_future_value": {"present_value": 5000, "annual_interest_rate": 0.05, "time_years": 37}}], "possible_answer": {"finance.predict_future_value": {"present_value": [5000], "annual_interest_rate": [0.05], "compounding_periods_per_year": [12], "time_years": [3]}}}
{"id": 140, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'yearly_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=5, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [0.05], "investment_amount": [2000], "years": [3]}}}
{"id": 144, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': 'Apple'. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}}, "model_result_raw": "[get_stock_price(company='Apple', days=5, exchange='NASDAQ')]", "model_result_decoded": [{"get_stock_price": {"company": "Apple", "days": 5, "exchange": "NASDAQ"}}], "possible_answer": {"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}}
{"id": 148, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'companies': ['Microsoft', ': governor jack: Google']. Expected one of [['Microsoft', 'Google']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Retrieve stock prices of Microsoft and Google for the last 2 weeks.", "function": {"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}}, "model_result_raw": "[get_stock_prices(companies=['Microsoft', ': governor jack: Google'], duration='2 weeks')]", "model_result_decoded": [{"get_stock_prices": {"companies": ["Microsoft", ": governor jack: Google"], "duration": "2 weeks"}}], "possible_answer": {"get_stock_prices": {"companies": [["Microsoft", "Google"]], "duration": ["2 weeks"]}}}
{"id": 149, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_investment': 50000. Expected one of [20000]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "rate_of_return": {"type": "float", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "integer", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}}, "model_result_raw": "[finance.calculate_future_value(initial_investment=50000, rate_of_return=0.08, years=5)]", "model_result_decoded": [{"finance.calculate_future_value": {"initial_investment": 50000, "rate_of_return": 0.08, "years": 5}}], "possible_answer": {"finance.calculate_future_value": {"initial_investment": [20000], "rate_of_return": [0.08], "years": [5], "contribution": ["", 0]}}}
{"id": 152, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='U.S.', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S.", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego')]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 167, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "[lawyer.find_nearby(city='Chicago', specialty=['Divorce'], fee=399)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 399}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 168, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_title': '\"'. Expected one of ['Roe v. Wade']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "function": {"name": "law.civil.get_case_details", "description": "Retrieve the details of a Supreme Court case given its title.", "parameters": {"type": "dict", "properties": {"case_title": {"type": "string", "description": "Title of the Supreme Court case."}, "include_dissent": {"type": "boolean", "description": "If true, the output will include details of the dissenting opinion."}}, "required": ["case_title", "include_dissent"]}}}, "model_result_raw": "[law.civil.get_case_details(case_title='\"', include_dissent=True)]", "model_result_decoded": [{"law.civil.get_case_details": {"case_title": "\"", "include_dissent": true}}], "possible_answer": {"law.civil.get_case_details": {"case_title": ["Roe v. Wade"], "include_dissent": [true]}}}
{"id": 183, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_number': ':'. Expected one of ['XYZ123']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve all the lawsuit details for case number XYZ123", "function": {"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is latest year if not specified.", "optional": true}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}}, "model_result_raw": "[lawsuit_info(case_number=':')]", "model_result_decoded": [{"lawsuit_info": {"case_number": ":"}}], "possible_answer": {"lawsuit_info": {"case_number": ["XYZ123"], "year": [""], "location": ["", "all"]}}}
{"id": 184, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'county': 'Santa Clara'. Expected one of ['Santa Clara County']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for current lawsuits filed against Apple in Santa Clara County.", "function": {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}}, "model_result_raw": "[lawsuit_search(entity='Apple', county='Santa Clara', state='California')]", "model_result_decoded": [{"lawsuit_search": {"entity": "Apple", "county": "Santa Clara", "state": "California"}}], "possible_answer": {"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County"], "state": ["California", ""]}}}
{"id": 189, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Miami, Florida'. Expected one of ['Miami']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."}}, "required": ["location", "days"]}}}, "model_result_raw": "[weather.humidity_forecast(location='Miami, Florida', days=7)]", "model_result_decoded": [{"weather.humidity_forecast": {"location": "Miami, Florida", "days": 7}}], "possible_answer": {"weather.humidity_forecast": {"location": ["Miami"], "days": [7], "min_humidity": ["", 0]}}}
{"id": 192, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ''. Expected one of ['Denver, Colorado', 'Denver', 'CO']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "function": {"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "integer", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}}, "model_result_raw": "[locate_tallest_mountains(location='', radius=50, amount=5)]", "model_result_decoded": [{"locate_tallest_mountains": {"location": "", "radius": 50, "amount": 5}}], "possible_answer": {"locate_tallest_mountains": {"location": ["Denver, Colorado", "Denver", "CO"], "radius": [50], "amount": [5]}}}
{"id": 201, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'fuel_efficiency'. Expected type float, got int. Parameter value: 25."], "error_type": "type_error:simple", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 203, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'renewable energy sources'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?", "function": {"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}}, "model_result_raw": "[calculate_emission_savings(energy_type='renewable energy sources', usage_duration=3, region='California')]", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "renewable energy sources", "usage_duration": 3, "region": "California"}}], "possible_answer": {"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}}
{"id": 204, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location='Chicago')]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 209, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways']. Expected one of [['highways', 'tolls']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Get me the directions from New York to Los Angeles avoiding highways and toll roads.", "function": {"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}}, "model_result_raw": "[map_service.get_directions(start='New York', end='Los Angeles', avoid=['highways'])]", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways"]}}], "possible_answer": {"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"]]}}}
{"id": 212, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Function name 'send_email' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 214, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '`2022-04-27`'. Expected one of ['2022-04-27', '04/27/2022', 'Apr 27, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon", "function": {"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'morning'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false."}}, "required": ["departure_location", "destination_location", "date"]}}}, "model_result_raw": "[flight.book(departure_location='San Francisco', destination_location='London', date='`2022-04-27`', time='`afternoon`', direct_flight=True)]", "model_result_decoded": [{"flight.book": {"departure_location": "San Francisco", "destination_location": "London", "date": "`2022-04-27`", "time": "`afternoon`", "direct_flight": true}}], "possible_answer": {"flight.book": {"departure_location": ["San Francisco", "SF"], "destination_location": ["London"], "date": ["2022-04-27", "04/27/2022", "Apr 27, 2022"], "time": ["afternoon", ""], "direct_flight": [true]}}}
{"id": 217, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Function name 'sentiment_analysis' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 218, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_source': '/'. Expected one of ['~/data/myfMRI.nii']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "function": {"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}}, "model_result_raw": "[fMRI.analyze(data_source='/', sequence_type='\"', smooth=6, voxel_size=2)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "/", "sequence_type": "\"", "smooth": 6, "voxel_size": 2}}], "possible_answer": {"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}}
{"id": 221, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'weight' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "function": {"name": "calculate_neuronal_activity", "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.", "parameters": {"type": "dict", "properties": {"input_synaptic_rate": {"type": "integer", "description": "The synaptic input rate, usually represented as number of inputs per second."}, "weight": {"type": "float", "description": "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."}, "decay_rate": {"type": "float", "description": "The rate at which the neuron's potential decays in the absence of inputs."}}, "required": ["input_synaptic_rate", "decay_rate"]}}}, "model_result_raw": "[calculate_neuronal_activity(input_synaptic_rate=200, decay_rate=0.1)]", "model_result_decoded": [{"calculate_neuronal_activity": {"input_synaptic_rate": 200, "decay_rate": 0.1}}], "possible_answer": {"calculate_neuronal_activity": {"input_synaptic_rate": [200], "weight": [0.5], "decay_rate": [0.1]}}}
{"id": 230, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['efficient', ':', ':', ':', ',organized', 'easy going', 'compassionate']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?", "function": {"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}}, "model_result_raw": "[get_bigfive_scores(characteristics=['efficient', ':', ':', ':', ',organized', 'easy going', 'compassionate'], scale='medium')]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["efficient", ":", ":", ":", ",organized", "easy going", "compassionate"], "scale": "medium"}}], "possible_answer": {"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}}
{"id": 239, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 0. Expected one of [1861]."], "error_type": "value_error:others", "prompt": {"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "[us_history.get_president(event='American Civil War', year=0)]", "model_result_decoded": [{"us_history.get_president": {"event": "American Civil War", "year": 0}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 244, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': 'neutron discovery'. Expected one of ['neutron']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who discovered the neutron? Give me detail information.", "function": {"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}}, "model_result_raw": "[get_discoverer(discovery='neutron discovery', detail=True)]", "model_result_decoded": [{"get_discoverer": {"discovery": "neutron discovery", "detail": true}}], "possible_answer": {"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}}
{"id": 250, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'include_people' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "[religion.history_info(religion='Christianity', till_century=14)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [true]}}}
{"id": 253, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'century': 1600. Expected one of [16]."], "error_type": "value_error:others", "prompt": {"question": "Find ten major historical events related to Christianity in the 16th century sort by importance.", "function": {"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}}, "model_result_raw": "[get_religion_history(religion='Christianity', century=1600, sort_by='importance', count=10)]", "model_result_decoded": [{"get_religion_history": {"religion": "Christianity", "century": 1600, "sort_by": "importance", "count": 10}}], "possible_answer": {"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}}
{"id": 256, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'papal_name': 'Pope Innocent III'. Expected one of ['Innocent III']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the biography and main contributions of Pope Innocent III.", "function": {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}}, "model_result_raw": "[religious_history.get_papal_biography(papal_name='Pope Innocent III', include_contributions=True)]", "model_result_decoded": [{"religious_history.get_papal_biography": {"papal_name": "Pope Innocent III", "include_contributions": true}}], "possible_answer": {"religious_history.get_papal_biography": {"papal_name": ["Innocent III"], "include_contributions": [true]}}}
{"id": 260, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coverage_rate': 300. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}}, "model_result_raw": "[calculate_paint_needed(coverage_rate=300, length=30, height=12)]", "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 300, "length": 30, "height": 12}}], "possible_answer": {"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}}
{"id": 261, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': 'object'. Expected one of ['window']."], "error_type": "value_error:dict_value", "prompt": {"question": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "function": {"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}}, "model_result_raw": "[paint_requirement.calculate(area={'width': 20, 'height': 12}, paint_coverage=350, exclusion={'type': 'object', 'area': 15})]", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"type": "object", "area": 15}}}], "possible_answer": {"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}}
{"id": 268, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location='New York', art_form='sculpture', month='')]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": ""}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 274, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '`The Louvre Museum`'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find out the open hours for the Louvre Museum in Paris.", "function": {"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}}, "model_result_raw": "[museum.get_hours(name='`The Louvre Museum`', location='`Paris`')]", "model_result_decoded": [{"museum.get_hours": {"name": "`The Louvre Museum`", "location": "`Paris`"}}], "possible_answer": {"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}}
{"id": 279, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'features' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": "[get_instrument_details(instrument='piano', manufacturer='Yamaha')]", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha"}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}}
{"id": 281, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'make' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find a Violin within my budget of $1000 with acoustic type.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": "[find_instrument(budget=1000, type='acoustic')]", "model_result_decoded": [{"find_instrument": {"budget": 1000, "type": "acoustic"}}], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": ["Violin", "violin"]}}}
{"id": 285, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': ''. Expected one of ['next month', '2023-06-01', '06/01/2023', 'Jun.1,2023', 'June 2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "[concert_info.get(location='New York', date='', genre='Pop')]", "model_result_decoded": [{"concert_info.get": {"location": "New York", "date": "", "genre": "Pop"}}], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 286, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago, Illinois'. Expected one of ['Chicago', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a Rock concert in Chicago with ticket availability under $100.", "function": {"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}}, "model_result_raw": "[find_concert(location='Chicago, Illinois', price=50, genre='Rock')]", "model_result_decoded": [{"find_concert": {"location": "Chicago, Illinois", "price": 50, "genre": "Rock"}}], "possible_answer": {"find_concert": {"location": ["Chicago", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}}
{"id": 288, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '>=this week,<=next week'. Expected one of ['this weekend']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": {"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}}, "model_result_raw": "[concert.search(genre='classical', location='Los Angeles', date='>=this week,<=next week', price_range='cheap')]", "model_result_decoded": [{"concert.search": {"genre": "classical", "location": "Los Angeles", "date": ">=this week,<=next week", "price_range": "cheap"}}], "possible_answer": {"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}}
{"id": 294, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'track_length': 30. Expected one of [180]."], "error_type": "value_error:others", "prompt": {"question": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "function": {"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}}, "model_result_raw": "[music_composer.create_mix(scale='C Major', note_duration='quarter', track_length=30)]", "model_result_decoded": [{"music_composer.create_mix": {"scale": "C Major", "note_duration": "quarter", "track_length": 30}}], "possible_answer": {"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}}
{"id": 299, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ':'. Expected one of ['C#']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What key signature does C# major have?", "function": {"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[music_theory.key_signature(key=':', scale_type='major')]", "model_result_decoded": [{"music_theory.key_signature": {"key": ":", "scale_type": "major"}}], "possible_answer": {"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}}
{"id": 300, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C# major'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the musical scale associated with C sharp major?", "function": {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}}, "model_result_raw": "[musical_scale(key='C# major')]", "model_result_decoded": [{"musical_scale": {"key": "C# major"}}], "possible_answer": {"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}}
{"id": 302, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "What is the third major chord in C major scale?", "function": {"name": "get_third_chord", "description": "Calculate the third major chord in a given key.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the scale."}, "type": {"type": "string", "description": "Type of the scale, either major or minor. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[get_third_chord(key='? influenced by the context, it seems 'C major' is specified in the question. ', type='')]", "possible_answer": {"get_third_chord": {"key": ["C"], "type": ["major", ""]}}}
{"id": 305, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get point and rebound stats for player 'LeBron James' from last basketball game", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}}, "model_result_raw": "[player_stats.getLastGame(player_name='LeBron James', team='', metrics=['Points', 'Rebounds'])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "LeBron James", "team": "", "metrics": ["Points", "Rebounds"]}}], "possible_answer": {"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}}
{"id": 306, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['Goals Scored']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season", "function": {"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}}, "model_result_raw": "[sports_stats.get_performance(player_name='Messi', tournament='La Liga', season='2020-2021', performance_indicator=['Goals Scored'])]", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["Goals Scored"]}}], "possible_answer": {"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}}
{"id": 309, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'league': 'Premier League'. Expected one of ['English Premier League', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "[sports.match_schedule(team_name='Manchester United', num_matches=5, league='Premier League')]", "model_result_decoded": [{"sports.match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "Premier League"}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 311, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ': '. Expected one of ['LeBron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the career stats of basketball player LeBron James?", "function": {"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}}, "model_result_raw": "[get_career_stats(player_name=': ')]", "model_result_decoded": [{"get_career_stats": {"player_name": ": "}}], "possible_answer": {"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}}
{"id": 321, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': ''. Expected one of ['current', '2022-2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Fetch the basketball league standings, where Golden State Warriors stand in current season with details", "function": {"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}}, "model_result_raw": "[sports_ranking.get_team_position(team='Golden State Warriors', season='', detailed=True)]", "model_result_decoded": [{"sports_ranking.get_team_position": {"team": "Golden State Warriors", "season": "", "detailed": true}}], "possible_answer": {"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["current", "2022-2023"], "detailed": [true]}}}
{"id": 331, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': ''. Expected one of ['Catan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the average review rating and the age range for the board game 'Catan'?", "function": {"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}}, "model_result_raw": "[board_game_info(game_name='', info_required=['average_review_rating', 'age_range'])]", "model_result_decoded": [{"board_game_info": {"game_name": "", "info_required": ["average_review_rating", "age_range"]}}], "possible_answer": {"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}}
{"id": 338, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 348, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '? \"Liverpool F.C.\", '. Expected one of ['Liverpool F.C.', 'Liverpool']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "function": {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}}, "model_result_raw": "[soccer.get_last_match(team_name='? \"Liverpool F.C.\", ', include_stats=True)]", "model_result_decoded": [{"soccer.get_last_match": {"team_name": "? \"Liverpool F.C.\", ", "include_stats": true}}], "possible_answer": {"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}}
{"id": 349, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': ''. Expected one of ['StarPlayer']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5.", "function": {"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}}, "model_result_raw": "[create_player_profile(player_name='', _class='', starting_level=5)]", "model_result_decoded": [{"create_player_profile": {"player_name": "", "_class": "", "starting_level": 5}}], "possible_answer": {"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}}
{"id": 353, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'platform': ''. Expected one of ['Nintendo Switch', 'all platforms']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "function": {"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}}, "model_result_raw": "[gamespot.getAverageUserScore(game_name='The Legend of Zelda: Breath of the Wild', platform='')]", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild", "platform": ""}}], "possible_answer": {"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}}
{"id": 355, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cooking_time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}}, "model_result_raw": "[get_vegan_recipe(dish_type='soup', cooking_time=29)]", "model_result_decoded": [{"get_vegan_recipe": {"dish_type": "soup", "cooking_time": 29}}], "possible_answer": {"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [["vegan"]]}}}
{"id": 357, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'prep_time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.", "function": {"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}}, "model_result_raw": "[recipe_finder.find(servings=2, diet='vegan', prep_time=29)]", "model_result_decoded": [{"recipe_finder.find": {"servings": 2, "diet": "vegan", "prep_time": 29}}], "possible_answer": {"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}}
{"id": 358, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'diet_preference': '? vegan'. Expected one of ['vegan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the recipe for vegan chocolate cake including the steps for preparation.", "function": {"name": "get_recipe", "description": "Fetch the recipe for a specific dish along with preparation steps.", "parameters": {"type": "dict", "properties": {"dish_name": {"type": "string", "description": "Name of the dish whose recipe needs to be fetched."}, "diet_preference": {"type": "string", "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.", "default": "none"}}, "required": ["dish_name"]}}}, "model_result_raw": "[get_recipe(dish_name='chocolate cake', diet_preference='? vegan')]", "model_result_decoded": [{"get_recipe": {"dish_name": "chocolate cake", "diet_preference": "? vegan"}}], "possible_answer": {"get_recipe": {"dish_name": ["chocolate cake", "vegan chocolate cake"], "diet_preference": ["vegan"]}}}
{"id": 363, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 0.8. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "[get_best_sushi_places(city='Tokyo', top=5, review_rate=0.8)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 0.8}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}}
{"id": 367, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'from_unit': 'tablespoons'. Expected one of ['tablespoon', 'tbsp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many teaspoons are in 2 tablespoons for accurate measurement in my recipe?", "function": {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}}, "model_result_raw": "[recipe.unit_conversion(value=2, from_unit='tablespoons', to_unit='teaspoons')]", "model_result_decoded": [{"recipe.unit_conversion": {"value": 2, "from_unit": "tablespoons", "to_unit": "teaspoons"}}], "possible_answer": {"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [0, ""]}}}
{"id": 368, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": "[find_recipe(dietary_restrictions='vegan', recipe_type='brownies', time=30)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 370, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['Organic']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Find a grocery store near me with organic fruits and vegetables in Houston.", "function": {"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}}, "model_result_raw": "[grocery_store.find_nearby(location='Houston, TX', categories=['Organic'])]", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["Organic"]}}], "possible_answer": {"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}}
{"id": 371, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['olive oil', 'olive oil', 'olive oil', 'five pound bag of rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='Palo Alto', items=['olive oil', 'olive oil', 'olive oil', 'five pound bag of rice'], quantity=[3, 3, 3, 1])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto", "items": ["olive oil", "olive oil", "olive oil", "five pound bag of rice"], "quantity": [3, 3, 3, 1]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack of bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='San Jose', product_list=['apples', 'rice', '12 pack of bottled water'])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack of bottled water"]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'store_location': ''. Expected one of ['Los Angeles', 'LA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 24], store_location='')]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 24], "store_location": ""}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 377, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'display_format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}}, "model_result_raw": "[time_zone_converter(city='London', country='UK')]", "model_result_decoded": [{"time_zone_converter": {"city": "London", "country": "UK"}}], "possible_answer": {"time_zone_converter": {"city": ["London"], "country": ["UK", "United Kingdom"], "display_format": ["24h", "24 hour"]}}}
{"id": 380, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Function name 'get_current_time' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "What's the current time in Sydney, Australia?", "function": {"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default "}}, "required": ["location", "country"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"get_current_time": {"location": ["Sydney"], "country": ["Australia"], "timezone": [""]}}}
{"id": 381, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': 'March 10, 2023'. Expected one of ['2023-03-10', '03/10/2023', 'Mar.10,2023', 'March 10th, 2023', 'March 10th,2023', 'March10th, 2023', 'March10th,2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "[hotel_booking(location='Manhattan, New York', room_type='single', duration=3, start_date='March 10, 2023', preferences=['pet_friendly'])]", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": "March 10, 2023", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}}
{"id": 383, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hilton', location='Chicago', room_type='single', start_date='10th December 2022', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 384, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': ':'. Expected one of ['The Plaza']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I would like to book a single room for two nights at The Plaza hotel.", "function": {"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}}, "model_result_raw": "[book_room(hotel_name=':', room_type='single', num_nights=2)]", "model_result_decoded": [{"book_room": {"hotel_name": ":", "room_type": "single", "num_nights": 2}}], "possible_answer": {"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}}
{"id": 387, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Optional parameter 'view' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury', start_date='05-12-2022', stay_duration=3)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "luxury", "start_date": "05-12-2022", "stay_duration": 3}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}}
{"id": 388, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York, NY'. Expected one of ['New York', 'New York City', 'New York City, NY', 'NYC', 'NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name='Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04', rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York", "New York City", "New York City, NY", "NYC", "NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 390, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type float, got int. Parameter value: 200."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_converter(base_currency='USD', target_currency='GBP', amount=200)]", "model_result_decoded": [{"currency_converter": {"base_currency": "USD", "target_currency": "GBP", "amount": 200}}], "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}
{"id": 392, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'British pounds'. Expected one of ['GBP']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "function": {"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}}, "model_result_raw": "[get_exchange_rate_with_fee(base_currency='British pounds', target_currency='Japanese yen', fee=0.02)]", "model_result_decoded": [{"get_exchange_rate_with_fee": {"base_currency": "British pounds", "target_currency": "Japanese yen", "fee": 0.02}}], "possible_answer": {"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}}
{"id": 394, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[convert_currency(base_currency='Japanese Yen', target_currency='United States Dollar', amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}
{"id": 395, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '`Eiffel Tower`, Paris, France'. Expected one of ['Eiffel Tower']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum", "function": {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}}, "model_result_raw": "[maps.get_distance_duration(start_location='`Eiffel Tower`, Paris, France', end_location='` Louvre Museum`, Paris, France')]", "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "`Eiffel Tower`, Paris, France", "end_location": "` Louvre Museum`, Paris, France"}}], "possible_answer": {"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}}
{"id": 399, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum_name': ': '. Expected one of ['Metropolitan Museum of Art', 'The Met']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the opening hours of the Metropolitan Museum of Art on Saturday?", "function": {"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week. If not specified, returns the current day's hours."}}, "required": ["museum_name", "day"]}}}, "model_result_raw": "[get_museum_hours(museum_name=': ', day=': ')]", "model_result_decoded": [{"get_museum_hours": {"museum_name": ": ", "day": ": "}}], "possible_answer": {"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met"], "day": ["Saturday"]}}}
{"id": 400, "model_name": "mistralai_Mistral-7B-Instruct-v0.2", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"question": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "function": {"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}}, "model_result_raw": "[restaurant_search(location='New York City, NY', cuisine='Italian', rating=5, accepts_credit_cards=True)]", "model_result_decoded": [{"restaurant_search": {"location": "New York City, NY", "cuisine": "Italian", "rating": 5, "accepts_credit_cards": true}}], "possible_answer": {"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}}