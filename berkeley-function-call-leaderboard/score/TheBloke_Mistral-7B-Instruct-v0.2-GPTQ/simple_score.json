{"accuracy": 0.695, "correct_count": 278, "total_count": 400}
{"id": 4, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 3. Expected one of [-3]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2.", "function": {"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[algebra.quadratic_roots(a=1, b=3, c=2)]", "model_result_decoded": [{"algebra.quadratic_roots": {"a": 1, "b": 3, "c": 2}}], "possible_answer": {"algebra.quadratic_roots": {"a": [1], "b": [-3], "c": [2]}}}
{"id": 6, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'b': 11. Expected one of [-11]."], "error_type": "value_error:others", "prompt": {"question": "Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4.", "function": {"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}}, "model_result_raw": "[solve_quadratic(a=3, b=11, c=4)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": 11, "c": 4}}], "possible_answer": {"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["", "real"]}}}
{"id": 14, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'function': '>& Miamielles-x:2'. Expected one of ['x^2', 'x**2']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the area under the curve y=x^2 from x=1 to x=3.", "function": {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}}, "model_result_raw": "[calculate_area_under_curve(function='>& Miamielles-x:2', interval=[1, 3])]", "model_result_decoded": [{"calculate_area_under_curve": {"function": ">& Miamielles-x:2", "interval": [1, 3]}}], "possible_answer": {"calculate_area_under_curve": {"function": ["x^2", "x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}}
{"id": 16, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_x': 5. Expected one of [-2]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method.", "function": {"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "integer", "description": "The starting x-value to integrate over."}, "end_x": {"type": "integer", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}}, "model_result_raw": "[integrate(function='x^3', start_x=5, end_x=2, method='simpson')]", "model_result_decoded": [{"integrate": {"function": "x^3", "start_x": 5, "end_x": 2, "method": "simpson"}}], "possible_answer": {"integrate": {"function": ["x^3", "x**3"], "start_x": [-2], "end_x": [3], "method": ["simpson"]}}}
{"id": 27, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duration': 120. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?", "function": {"name": "calculate_velocity", "description": "Calculate the velocity for a certain distance travelled within a specific duration.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled by the object, typically in kilometers."}, "duration": {"type": "integer", "description": "The duration of the journey, typically in hours."}, "unit": {"type": "string", "description": "Optional parameter. The unit to return the velocity in. If not provided, the default is km/h."}}, "required": ["distance", "duration"]}}}, "model_result_raw": "[calculate_velocity(distance=50, duration=120)]", "model_result_decoded": [{"calculate_velocity": {"distance": 50, "duration": 120}}], "possible_answer": {"calculate_velocity": {"distance": [50], "duration": [2], "unit": ["", "km/h"]}}}
{"id": 30, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'initial_speed' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?", "function": {"name": "calculate_final_speed", "description": "Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2", "parameters": {"type": "dict", "properties": {"initial_speed": {"type": "integer", "description": "The initial speed of the object in m/s. Default is 0 for an object at rest."}, "time": {"type": "integer", "description": "The time in seconds for which the object is in free fall."}, "gravity": {"type": "float", "description": "The acceleration due to gravity. Default is -9.81 m/s^2."}}, "required": ["time"]}}}, "model_result_raw": "[calculate_final_speed(time=5)]", "model_result_decoded": [{"calculate_final_speed": {"time": 5}}], "possible_answer": {"calculate_final_speed": {"initial_speed": [0], "time": [5], "gravity": [-9.81, ""]}}}
{"id": 36, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operating_hours': 11. Expected one of [23]."], "error_type": "value_error:others", "prompt": {"question": "Find an all vegan restaurant in New York that opens until at least 11 PM.", "function": {"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}}, "model_result_raw": "[vegan_restaurant.find_nearby(location='New York, NY', operating_hours=11)]", "model_result_decoded": [{"vegan_restaurant.find_nearby": {"location": "New York, NY", "operating_hours": 11}}], "possible_answer": {"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}}
{"id": 47, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'mass1': 40. Expected one of [20]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius.", "function": {"name": "calculate_final_temperature", "description": "Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures", "parameters": {"type": "dict", "properties": {"mass1": {"type": "integer", "description": "The mass of the first body (kg)."}, "temperature1": {"type": "integer", "description": "The initial temperature of the first body (Celsius)."}, "mass2": {"type": "integer", "description": "The mass of the second body (kg)."}, "temperature2": {"type": "integer", "description": "The initial temperature of the second body (Celsius)."}, "specific_heat_capacity": {"type": "float", "description": "The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K."}}, "required": ["mass1", "temperature1", "mass2", "temperature2"]}}}, "model_result_raw": "[calculate_final_temperature(mass1=40, temperature1=30, mass2=15, temperature2=60)]", "model_result_decoded": [{"calculate_final_temperature": {"mass1": 40, "temperature1": 30, "mass2": 15, "temperature2": 60}}], "possible_answer": {"calculate_final_temperature": {"mass1": [20], "temperature1": [30], "mass2": [15], "temperature2": [60], "specific_heat_capacity": ["", 4.2]}}}
{"id": 49, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'mass': 5. Expected one of [45]."], "error_type": "value_error:others", "prompt": {"question": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?", "function": {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}}, "model_result_raw": "[calculate_density(mass=5, volume=15)]", "model_result_decoded": [{"calculate_density": {"mass": 5, "volume": 15}}], "possible_answer": {"calculate_density": {"mass": [45], "volume": [15], "unit": ["", "kg/m\u00b3"]}}}
{"id": 58, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'optical_density': 5.4. Expected one of [0.6]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times.", "function": {"name": "calculate_cell_density", "description": "Calculate the cell density of a biological sample based on its optical density and the experiment dilution.", "parameters": {"type": "dict", "properties": {"optical_density": {"type": "float", "description": "The optical density of the sample, usually obtained from a spectrophotometer reading."}, "dilution": {"type": "integer", "description": "The dilution factor applied during the experiment."}, "calibration_factor": {"type": "float", "description": "The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL."}}, "required": ["optical_density", "dilution"]}}}, "model_result_raw": "[calculate_cell_density(optical_density=5.4, dilution=5)]", "model_result_decoded": [{"calculate_cell_density": {"optical_density": 5.4, "dilution": 5}}], "possible_answer": {"calculate_cell_density": {"optical_density": [0.6], "dilution": [5], "calibration_factor": [1000000000.0, ""]}}}
{"id": 60, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'compound': ':'. Expected one of ['C6H12O6']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole.", "function": {"name": "calculate_molecular_weight", "description": "Calculate the molecular weight of a compound given the compound formula.", "parameters": {"type": "dict", "properties": {"compound": {"type": "string", "description": "The molecular formula of the compound."}, "to_unit": {"type": "string", "description": "The unit in which to return the result."}}, "required": ["compound", "to_unit"]}}}, "model_result_raw": "[calculate_molecular_weight(compound=':', to_unit=':')]", "model_result_decoded": [{"calculate_molecular_weight": {"compound": ":", "to_unit": ":"}}], "possible_answer": {"calculate_molecular_weight": {"compound": ["C6H12O6"], "to_unit": ["grams/mole", "g/mol"]}}}
{"id": 62, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'height': 610. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes.", "function": {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}}, "model_result_raw": "[diabetes_prediction(weight=150, height=610, activity_level='lightly active')]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 610, "activity_level": "lightly active"}}], "possible_answer": {"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}}
{"id": 68, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'habitat': '>forest<'. Expected one of ['forest']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Identify a small green bird in forest.", "function": {"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "dict", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird. Default is 'small'"}}, "required": ["color", "habitat"]}}}, "model_result_raw": "[identify_bird(color='green', habitat='>forest<', size='small')]", "model_result_decoded": [{"identify_bird": {"color": "green", "habitat": ">forest<", "size": "small"}}], "possible_answer": {"identify_bird": {"color": ["green"], "habitat": ["forest"], "size": ["small"]}}}
{"id": 70, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find out the population and species of turtles in Mississippi river in 2020.", "function": {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}}, "model_result_raw": "[ecology.get_turtle_population(location='Mississippi river', year=2020)]", "model_result_decoded": [{"ecology.get_turtle_population": {"location": "Mississippi river", "year": 2020}}], "possible_answer": {"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}}
{"id": 76, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'current_population': 50000. Expected one of [35000]."], "error_type": "value_error:others", "prompt": {"question": "Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015.", "function": {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "dict", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "float", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}}, "model_result_raw": "[elephant_population_estimate(current_population=50000, growth_rate=0.015, years=5)]", "model_result_decoded": [{"elephant_population_estimate": {"current_population": 50000, "growth_rate": 0.015, "years": 5}}], "possible_answer": {"elephant_population_estimate": {"current_population": [35000], "growth_rate": [0.015], "years": [5]}}}
{"id": 77, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'prediction.evolution' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model", "function": {"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}}
{"id": 78, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\"'. Expected one of ['Los Angeles, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a nearby restaurant that serves vegan food in Los Angeles.", "function": {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}}, "model_result_raw": "[restaurant.find_nearby(location='\"', dietary_preference=['Vegan'])]", "model_result_decoded": [{"restaurant.find_nearby": {"location": "\"", "dietary_preference": ["Vegan"]}}], "possible_answer": {"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}}
{"id": 81, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Manhattan, City'. Expected one of ['Manhattan, New York City', 'Manhattan', 'Manhattan, New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu.", "function": {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}}, "model_result_raw": "[find_restaurants(location='Manhattan, City', food_type='Thai', number=5, dietary_requirements=['vegan'])]", "model_result_decoded": [{"find_restaurants": {"location": "Manhattan, City", "food_type": "Thai", "number": 5, "dietary_requirements": ["vegan"]}}], "possible_answer": {"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}}
{"id": 83, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30].", "function": {"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": {"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}}
{"id": 84, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord1': [33.4484, 112.074]. Expected one of [[[33.4484, -112.074], [33.4484, 112.074]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles.", "function": {"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}}, "model_result_raw": "[calculate_distance(coord1=[33.4484, 112.074], coord2=[34.0522, 118.2437], unit='miles')]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, 112.074], "coord2": [34.0522, 118.2437], "unit": "miles"}}], "possible_answer": {"calculate_distance": {"coord1": [[[33.4484, -112.074], [33.4484, 112.074]]], "coord2": [[34.0522, -118.2437], [34.0522, 118.2437]], "unit": ["miles"]}}}
{"id": 85, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight': 58. Expected one of [85]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm.", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in kilograms."}, "height": {"type": "integer", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}}, "model_result_raw": "[calculate_bmi(weight=58, height=180, unit='metric')]", "model_result_decoded": [{"calculate_bmi": {"weight": 58, "height": 180, "unit": "metric"}}], "possible_answer": {"calculate_bmi": {"weight": [85], "height": [180], "unit": ["metric", ""]}}}
{"id": 88, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"question": "Sort the list [5, 3, 4, 1, 2] in ascending order.", "function": {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": {"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}}
{"id": 89, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight_kg': 50. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall.", "function": {"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "integer", "description": "The weight of the person in kilograms."}, "height_m": {"type": "float", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}}, "model_result_raw": "[calculate_BMI(weight_kg=50, height_m=1.75)]", "model_result_decoded": [{"calculate_BMI": {"weight_kg": 50, "height_m": 1.75}}], "possible_answer": {"calculate_BMI": {"weight_kg": [70], "height_m": [1.75]}}}
{"id": 92, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Get the highest rated sushi restaurant in Boston, that opens on Sundays.", "function": {"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}}, "model_result_raw": "[get_restaurant(cuisine='sushi', location='Boston', condition=':{'dayOfWeek':'Sunday', 'open': true}')]", "possible_answer": {"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays"]}}}
{"id": 95, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'user_id': 56789. Expected one of [43523]."], "error_type": "value_error:others", "prompt": {"question": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.", "function": {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}}, "model_result_raw": "[update_user_info(user_id=56789, update_info={'name': 'John Doe', 'email': 'johndoe@email.com'})]", "model_result_decoded": [{"update_user_info": {"user_id": 56789, "update_info": {"name": "John Doe", "email": "johndoe@email.com"}}}], "possible_answer": {"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}}
{"id": 97, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'operation': ','. Expected one of ['=']."], "error_type": "value_error:dict_value", "prompt": {"question": "Find records in database in user table where age is greater than 25 and job is 'engineer'.", "function": {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed."}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}}, "model_result_raw": "[database.query(table='user', conditions=[{'field': 'age', 'operation': '>', 'value': '25'}, {'field': 'job', 'operation': ',', 'value': 'engineer'}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": ",", "value": "engineer"}]}}], "possible_answer": {"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}}
{"id": 100, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 2.1. Expected one of [6.283185307179586]."], "error_type": "value_error:others", "prompt": {"question": "data/gorilla_openfunctions_v1_test_simple.json", "function": {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "integer", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2.1, frequency=1000, amplitude=1, phase_shift=0)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2.1, "frequency": 1000, "amplitude": 1, "phase_shift": 0}}], "possible_answer": {"plot_sine_wave": {"start_range": [0], "end_range": [6.283185307179586], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}}
{"id": 102, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 540. Expected one of [450]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds.", "function": {"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}}, "model_result_raw": "[calculate_speed(distance=540, time=20, to_unit='km/h')]", "model_result_decoded": [{"calculate_speed": {"distance": 540, "time": 20, "to_unit": "km/h"}}], "possible_answer": {"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}}
{"id": 103, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'unit': 'miles'. Expected one of ['mi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What's the distance in milesfrom the Earth to the Moon?", "function": {"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "dict", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'km'."}}, "required": ["body1", "body2"]}}}, "model_result_raw": "[calculate_distance(body1='Earth', body2='Moon', unit='miles')]", "model_result_decoded": [{"calculate_distance": {"body1": "Earth", "body2": "Moon", "unit": "miles"}}], "possible_answer": {"calculate_distance": {"body1": ["Earth"], "body2": ["Moon"], "unit": ["mi"]}}}
{"id": 104, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"question": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2.", "function": {"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": {"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}}
{"id": 107, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'train_random_forest_classifier' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100.", "function": {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"train_random_forest_classifier": {"dataset": ["your_dataset_name"], "max_depth": [5], "n_estimators": [100]}}}
{"id": 108, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight': 50. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm.", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}}, "model_result_raw": "[calculate_bmi(weight=50, height=175, system='metric')]", "model_result_decoded": [{"calculate_bmi": {"weight": 50, "height": 175, "system": "metric"}}], "possible_answer": {"calculate_bmi": {"weight": [70], "height": [175], "system": ["metric", ""]}}}
{"id": 110, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'n_estimators': 50. Expected one of [100]."], "error_type": "value_error:others", "prompt": {"question": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data.", "function": {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "any", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}}, "model_result_raw": "[random_forest.train(n_estimators=50, max_depth=5, data='my_data')]", "model_result_decoded": [{"random_forest.train": {"n_estimators": 50, "max_depth": 5, "data": "my_data"}}], "possible_answer": {"random_forest.train": {"n_estimators": [100], "max_depth": [5], "data": ["my_data"]}}}
{"id": 113, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_outcomes': 46. Expected one of [52]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of drawing a king from a deck of cards.", "function": {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}}, "model_result_raw": "[calculate_probability(total_outcomes=46, favorable_outcomes=4)]", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 46, "favorable_outcomes": 4}}], "possible_answer": {"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}}
{"id": 116, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number_of_trials': 3. Expected one of [8]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin.", "function": {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}}, "model_result_raw": "[calculate_binomial_probability(number_of_trials=3, number_of_successes=5, probability_of_success=0.5)]", "model_result_decoded": [{"calculate_binomial_probability": {"number_of_trials": 3, "number_of_successes": 5, "probability_of_success": 0.5}}], "possible_answer": {"calculate_binomial_probability": {"number_of_trials": [8], "number_of_successes": [5], "probability_of_success": ["", 0.5]}}}
{"id": 119, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'array_1'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"question": "Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05", "function": {"name": "stats.t_test", "description": "Perform a two-sample t-test for two given arrays.", "parameters": {"type": "dict", "properties": {"array_1": {"type": "array", "items": {"type": "integer"}, "description": "First array of data."}, "array_2": {"type": "array", "items": {"type": "integer"}, "description": "Second array of data."}, "alpha": {"type": "float", "description": "Significance level for hypothesis testing."}}, "required": ["array_1", "array_2", "alpha"]}}}, "model_result_raw": "[stats.t_test(array_1=[10, 15, 12, 14, 11], array_2=[18, 16, 17, 20, 22], alpha=0.05)]", "model_result_decoded": [{"stats.t_test": {"array_1": [10, 15, 12, 14, 11], "array_2": [18, 16, 17, 20, 22], "alpha": 0.05}}], "possible_answer": {"stats.t_test": {"array": [[10, 15, 12, 14, 11]], "array_2": [[18, 16, 17, 20, 22]], "alpha": [0.05]}}}
{"id": 122, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'num_trials': 4009626547687. Expected one of [100]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5.", "function": {"name": "calc_binomial_prob", "description": "Calculates the probability of an outcome based on the binomial distribution", "parameters": {"type": "dict", "properties": {"num_trials": {"type": "integer", "description": "Number of independent experiments."}, "num_success": {"type": "integer", "description": "Number of times the event of interest has occurred."}, "prob_success": {"type": "float", "description": "Probability of the event of interest on any single experiment."}}, "required": ["num_trials", "num_success", "prob_success"]}}}, "model_result_raw": "[calc_binomial_prob(num_trials=4009626547687, num_success=5576, prob_success=4249)]", "model_result_decoded": [{"calc_binomial_prob": {"num_trials": 4009626547687, "num_success": 5576, "prob_success": 4249}}], "possible_answer": {"calc_binomial_prob": {"num_trials": [100], "num_success": [60], "prob_success": [0.5]}}}
{"id": 123, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': [10, 20, 30, 40]. Expected one of [[[10, 20], [30, 40]]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]", "function": {"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "integer"}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}}, "model_result_raw": "[chi_squared_test(table=[10, 20, 30, 40], alpha=0.05)]", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40], "alpha": 0.05}}], "possible_answer": {"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}}
{"id": 126, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ': San Francisco:'. Expected one of ['San Francisco', 'SF']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990.", "function": {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "dict", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}}, "model_result_raw": "[predict_house_price(area=2500, rooms=5, year=1990, location=': San Francisco:')]", "model_result_decoded": [{"predict_house_price": {"area": 2500, "rooms": 5, "year": 1990, "location": ": San Francisco:"}}], "possible_answer": {"predict_house_price": {"area": [2500], "rooms": [5], "year": [1990], "location": ["San Francisco", "SF"]}}}
{"id": 131, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cash_flows': [50000, 10000, 15000, 20000, 25000, 30000]. Expected one of [[-50000, 10000, 15000, 20000, 25000, 30000]]."], "error_type": "value_error:list/tuple", "prompt": {"question": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?", "function": {"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "A list of cash flows."}, "discount_rate": {"type": "float", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "integer"}, "description": "A list of years when the cash flow occurs. Default is empty array."}}, "required": ["cash_flows", "discount_rate"]}}}, "model_result_raw": "[finance_calculator.npv(cash_flows=[50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08)]", "model_result_decoded": [{"finance_calculator.npv": {"cash_flows": [50000, 10000, 15000, 20000, 25000, 30000], "discount_rate": 0.08}}], "possible_answer": {"finance_calculator.npv": {"cash_flows": [[-50000, 10000, 15000, 20000, 25000, 30000]], "discount_rate": [0.08], "years": ["", []]}}}
{"id": 133, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'net_income': 0. Expected one of [2000000]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000.", "function": {"name": "calculate_return_on_equity", "description": "Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "integer", "description": "The company's net income."}, "shareholder_equity": {"type": "integer", "description": "The company's total shareholder's equity."}, "dividends_paid": {"type": "integer", "description": "The total dividends paid by the company. Optional. If not given, default to 0."}}, "required": ["net_income", "shareholder_equity"]}}}, "model_result_raw": "[calculate_return_on_equity(net_income=0, shareholder_equity=0, dividends_paid=200000)]", "model_result_decoded": [{"calculate_return_on_equity": {"net_income": 0, "shareholder_equity": 0, "dividends_paid": 200000}}], "possible_answer": {"calculate_return_on_equity": {"net_income": [2000000], "shareholder_equity": [10000000], "dividends_paid": [200000]}}}
{"id": 140, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'yearly_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"question": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?", "function": {"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=5, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5, "investment_amount": 2000, "years": 3}}], "possible_answer": {"estimate_mutual_fund_return": {"yearly_yield": [0.05], "investment_amount": [2000], "years": [3]}}}
{"id": 141, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_value': 1000. Expected one of [2000]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years.", "function": {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "dict", "properties": {"initial_value": {"type": "integer", "description": "The initial investment value."}, "final_value": {"type": "integer", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}}, "model_result_raw": "[calculate_cagr(initial_value=1000, final_value=3000, period_in_years=4)]", "model_result_decoded": [{"calculate_cagr": {"initial_value": 1000, "final_value": 3000, "period_in_years": 4}}], "possible_answer": {"calculate_cagr": {"initial_value": [2000], "final_value": [3000], "period_in_years": [4]}}}
{"id": 144, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company': 'Apple'. Expected one of ['AAPL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "'Get stock price of Apple for the last 5 days in NASDAQ.'", "function": {"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}}, "model_result_raw": "[get_stock_price(company='Apple', days=5, exchange='NASDAQ')]", "model_result_decoded": [{"get_stock_price": {"company": "Apple", "days": 5, "exchange": "NASDAQ"}}], "possible_answer": {"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}}
{"id": 149, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'initial_investment': 32000. Expected one of [20000]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years.", "function": {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "rate_of_return": {"type": "float", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "integer", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}}, "model_result_raw": "[finance.calculate_future_value(initial_investment=32000, rate_of_return=0.08, years=5)]", "model_result_decoded": [{"finance.calculate_future_value": {"initial_investment": 32000, "rate_of_return": 0.08, "years": 5}}], "possible_answer": {"finance.calculate_future_value": {"initial_investment": [20000], "rate_of_return": [0.08], "years": [5], "contribution": ["", 0]}}}
{"id": 152, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find the highest grossing banks in the U.S for year 2020.", "function": {"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}}, "model_result_raw": "[highest_grossing_banks(country='U.S.', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S.", "year": 2020}}], "possible_answer": {"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}}
{"id": 157, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Look up details of a felony crime record for case number CA123456 in San Diego County", "function": {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego')]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": {"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego"], "details": [true]}}}
{"id": 159, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015.", "function": {"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}}, "model_result_raw": "[get_criminal_records(name='Mr. X', location='New York', from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": {"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}}
{"id": 162, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'crime_statute_lookup' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Find out the possible punishments for the crime of theft in California in detail.", "function": {"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}}
{"id": 165, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'state': ''. Expected one of ['California']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Provide me the official crime rate of violent crime in San Francisco in 2020.", "function": {"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default is 'violent'"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Default is year 2001."}}, "required": ["city", "state"]}}}, "model_result_raw": "[get_crime_rate(city='San Francisco', state='', type='violent', year=2020)]", "model_result_decoded": [{"get_crime_rate": {"city": "San Francisco", "state": "", "type": "violent", "year": 2020}}], "possible_answer": {"get_crime_rate": {"city": ["San Francisco"], "state": ["California"], "type": ["violent", ""], "year": [2020]}}}
{"id": 167, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago.", "function": {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}}, "model_result_raw": "[lawyer.find_nearby(city='Chicago', specialty=['Divorce'], fee=399)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 399}}], "possible_answer": {"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}}
{"id": 168, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_title': ''. Expected one of ['Roe v. Wade']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information.", "function": {"name": "law.civil.get_case_details", "description": "Retrieve the details of a Supreme Court case given its title.", "parameters": {"type": "dict", "properties": {"case_title": {"type": "string", "description": "Title of the Supreme Court case."}, "include_dissent": {"type": "boolean", "description": "If true, the output will include details of the dissenting opinion."}}, "required": ["case_title", "include_dissent"]}}}, "model_result_raw": "[law.civil.get_case_details(case_title='', include_dissent=True)]", "model_result_decoded": [{"law.civil.get_case_details": {"case_title": "", "include_dissent": true}}], "possible_answer": {"law.civil.get_case_details": {"case_title": ["Roe v. Wade"], "include_dissent": [true]}}}
{"id": 169, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '>=01-01-2021'. Expected one of ['01-01-2021', 'January 1, 2021']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.", "function": {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}}, "model_result_raw": "[lawsuit_search(company='Google', start_date='>=01-01-2021', location='California', status='ongoing')]", "model_result_decoded": [{"lawsuit_search": {"company": "Google", "start_date": ">=01-01-2021", "location": "California", "status": "ongoing"}}], "possible_answer": {"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}}
{"id": 171, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'subject': ': '. Expected one of ['fraud']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a historical law case about fraud from 2010 to 2015.", "function": {"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}}, "model_result_raw": "[law_case_search.find_historical(subject=': ', from_year=5, to_year=2015937139)]", "model_result_decoded": [{"law_case_search.find_historical": {"subject": ": ", "from_year": 5, "to_year": 2015937139}}], "possible_answer": {"law_case_search.find_historical": {"subject": ["fraud"], "from_year": [2010], "to_year": [2015]}}}
{"id": 174, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'judicial_system' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York.", "function": {"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}}, "model_result_raw": "[law_case_search(topic='land disputes', year_range=[2015, 2021], location='New York')]", "model_result_decoded": [{"law_case_search": {"topic": "land disputes", "year_range": [2015, 2021], "location": "New York"}}], "possible_answer": {"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}}
{"id": 177, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': ': '. Expected one of ['Apple Inc.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010.", "function": {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}}, "model_result_raw": "[lawsuit_details.find(company_name=': ', year=32010)]", "model_result_decoded": [{"lawsuit_details.find": {"company_name": ": ", "year": 32010}}], "possible_answer": {"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}}
{"id": 185, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'closed_status': False. Expected one of [True]."], "error_type": "value_error:others", "prompt": {"question": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed.", "function": {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}}, "model_result_raw": "[lawsuit.check_case(case_id=1234, closed_status=False)]", "model_result_decoded": [{"lawsuit.check_case": {"case_id": 1234, "closed_status": false}}], "possible_answer": {"lawsuit.check_case": {"case_id": [1234], "closed_status": [true]}}}
{"id": 189, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Miami, Florida'. Expected one of ['Miami']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the humidity level in Miami, Florida in the upcoming 7 days?", "function": {"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."}}, "required": ["location", "days"]}}}, "model_result_raw": "[weather.humidity_forecast(location='Miami, Florida', days=7)]", "model_result_decoded": [{"weather.humidity_forecast": {"location": "Miami, Florida", "days": 7}}], "possible_answer": {"weather.humidity_forecast": {"location": ["Miami"], "days": [7], "min_humidity": ["", 0]}}}
{"id": 192, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\"Denver, Colorado\",'. Expected one of ['Denver, Colorado', 'Denver', 'CO']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me the 5 tallest mountains within 50km of Denver, Colorado.", "function": {"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "integer", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}}, "model_result_raw": "[locate_tallest_mountains(location='\"Denver, Colorado\",', radius=50, amount=5)]", "model_result_decoded": [{"locate_tallest_mountains": {"location": "\"Denver, Colorado\",", "radius": 50, "amount": 5}}], "possible_answer": {"locate_tallest_mountains": {"location": ["Denver, Colorado", "Denver", "CO"], "radius": [50], "amount": [5]}}}
{"id": 197, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': ':2022-08-16'. Expected one of ['2022-08-16', '16/08/2022', 'Aug.16,2022', '2022/08/16']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What is the air quality index in London 2022/08/16?", "function": {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}}, "model_result_raw": "[air_quality(location='London', date=':2022-08-16')]", "model_result_decoded": [{"air_quality": {"location": "London", "date": ":2022-08-16"}}], "possible_answer": {"air_quality": {"location": ["London"], "date": ["2022-08-16", "16/08/2022", "Aug.16,2022", "2022/08/16"]}}}
{"id": 199, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight': 50. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the required water daily intake for a person with weight 70 kg.", "function": {"name": "calculate_daily_water_intake", "description": "Calculate the recommended daily water intake for a person based on their weight.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "activity_level": {"type": "string", "description": "The level of physical activity of the person. Default is 'moderate'."}, "climate": {"type": "string", "description": "The climate of the area where the person lives. Default is 'temperate'."}}, "required": ["weight"]}}}, "model_result_raw": "[calculate_daily_water_intake(weight=50, activity_level='moderate', climate='temperate')]", "model_result_decoded": [{"calculate_daily_water_intake": {"weight": 50, "activity_level": "moderate", "climate": "temperate"}}], "possible_answer": {"calculate_daily_water_intake": {"weight": [70], "activity_level": ["", "moderate"], "climate": ["", "temperate"]}}}
{"id": 201, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'fuel_efficiency'. Expected type float, got int. Parameter value: 25."], "error_type": "type_error:simple", "prompt": {"question": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25% ?", "function": {"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type='gas', fuel_efficiency=25)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25}}], "possible_answer": {"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 20.0], "efficiency_reduction": [0, ""]}}}
{"id": 204, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Can you find me the latest information about air quality index and pollution data for Chicago?", "function": {"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}, "historical": {"type": "string", "description": "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", "default": "today"}}, "required": ["location"]}}}, "model_result_raw": "[get_air_quality(location='Chicago')]", "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": {"get_air_quality": {"location": ["Chicago"], "detail": [true], "historical": ["", "today"]}}}
{"id": 212, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'.", "function": {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}}, "model_result_raw": "[send_email(to='john.doe@example.com', subject='Meeting', body='Let's meet at 10 AM tomorrow')]", "possible_answer": {"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}}
{"id": 217, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'sentiment_analysis' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'.", "function": {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}}
{"id": 218, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_source': ''. Expected one of ['~/data/myfMRI.nii']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm.", "function": {"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}}, "model_result_raw": "[fMRI.analyze(data_source='', sequence_type='', smooth=6, voxel_size=2)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "", "sequence_type": "", "smooth": 6, "voxel_size": 2}}], "possible_answer": {"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}}
{"id": 221, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'input_synaptic_rate': 0. Expected one of [200]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1.", "function": {"name": "calculate_neuronal_activity", "description": "Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it.", "parameters": {"type": "dict", "properties": {"input_synaptic_rate": {"type": "integer", "description": "The synaptic input rate, usually represented as number of inputs per second."}, "weight": {"type": "float", "description": "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."}, "decay_rate": {"type": "float", "description": "The rate at which the neuron's potential decays in the absence of inputs."}}, "required": ["input_synaptic_rate", "decay_rate"]}}}, "model_result_raw": "[calculate_neuronal_activity(input_synaptic_rate=0, weight=0.5, decay_rate=0.1)]", "model_result_decoded": [{"calculate_neuronal_activity": {"input_synaptic_rate": 0, "weight": 0.5, "decay_rate": 0.1}}], "possible_answer": {"calculate_neuronal_activity": {"input_synaptic_rate": [200], "weight": [0.5], "decay_rate": [0.1]}}}
{"id": 223, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'weight': 50. Expected one of [70]."], "error_type": "value_error:others", "prompt": {"question": "Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?", "function": {"name": "calculate_bmi", "description": "Calculate the Body Mass Index based on given weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of a person in kilograms."}, "height": {"type": "integer", "description": "The height of a person in centimeters."}, "unit": {"type": "string", "description": "Optional. The measurement system to be used for the result. The default is 'metric'."}}, "required": ["weight", "height"]}}}, "model_result_raw": "[calculate_bmi(weight=50, height=180)]", "model_result_decoded": [{"calculate_bmi": {"weight": 50, "height": 180}}], "possible_answer": {"calculate_bmi": {"weight": [70], "height": [180], "unit": ["", "metric"]}}}
{"id": 227, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sign1': ':'. Expected one of ['Aries']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the compatibility score in percentage of Aries with Gemini.", "function": {"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "dict", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}}, "model_result_raw": "[get_zodiac_compatibility(sign1=':', sign2=':', scale='percentage')]", "model_result_decoded": [{"get_zodiac_compatibility": {"sign1": ":", "sign2": ":", "scale": "percentage"}}], "possible_answer": {"get_zodiac_compatibility": {"sign1": ["Aries"], "sign2": ["Gemini"], "scale": ["percentage", ""]}}}
{"id": 234, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY.", "function": {"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}}, "model_result_raw": "[european_history.get_event_date(event_name='Treaty of Tordesillas')]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": {"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}}
{"id": 237, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event_name': ';\u62e9\u8d34\u0437\u043d\u043e\u53e3 words\ud83d\udc8e American Civil War'. Expected one of ['American Civil War', 'Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get start date on the American Civil War.", "function": {"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}}, "model_result_raw": "[us_history.get_event_info(event_name=';\u62e9\u8d34\u0437\u043d\u043e\u53e3 words\ud83d\udc8e American Civil War', specific_info='Start Date')]", "model_result_decoded": [{"us_history.get_event_info": {"event_name": ";\u62e9\u8d34\u0437\u043d\u043e\u53e3 words\ud83d\udc8e American Civil War", "specific_info": "Start Date"}}], "possible_answer": {"us_history.get_event_info": {"event_name": ["American Civil War", "Civil War"], "specific_info": ["Start Date"]}}}
{"id": 239, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'year': 0. Expected one of [1861]."], "error_type": "value_error:others", "prompt": {"question": "Who was the president of the United States during the American Civil War?", "function": {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}}, "model_result_raw": "[us_history.get_president(event='American Civil War', year=0)]", "model_result_decoded": [{"us_history.get_president": {"event": "American Civil War", "year": 0}}], "possible_answer": {"us_history.get_president": {"event": ["American Civil War"], "year": [1861]}}}
{"id": 244, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': 'neutron discovery'. Expected one of ['neutron']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who discovered the neutron? Give me detail information.", "function": {"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}}, "model_result_raw": "[get_discoverer(discovery='neutron discovery', detail=True)]", "model_result_decoded": [{"get_discoverer": {"discovery": "neutron discovery", "detail": true}}], "possible_answer": {"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}}
{"id": 245, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Laws of Universal Gravitation'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What year was the law of universal gravitation published by Isaac Newton?", "function": {"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}}, "model_result_raw": "[publication_year.find(author='Isaac Newton', work_title='Laws of Universal Gravitation', location='')]", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Laws of Universal Gravitation", "location": ""}}], "possible_answer": {"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}}
{"id": 249, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'invention_name': ':'. Expected one of ['theory of relativity', 'Theory of Relativity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who invented the theory of relativity and in which year?", "function": {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}}, "model_result_raw": "[science_history.get_invention(invention_name=':', want_year=True)]", "model_result_decoded": [{"science_history.get_invention": {"invention_name": ":", "want_year": true}}], "possible_answer": {"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}}
{"id": 250, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'include_people' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Tell me more about Christianity and its history till the 14th century", "function": {"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}}, "model_result_raw": "[religion.history_info(religion='Christianity', till_century=14)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14}}], "possible_answer": {"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [true]}}}
{"id": 256, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'papal_name': 'Pope Innocent III'. Expected one of ['Innocent III']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the biography and main contributions of Pope Innocent III.", "function": {"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}}, "model_result_raw": "[religious_history.get_papal_biography(papal_name='Pope Innocent III', include_contributions=True)]", "model_result_decoded": [{"religious_history.get_papal_biography": {"papal_name": "Pope Innocent III", "include_contributions": true}}], "possible_answer": {"religious_history.get_papal_biography": {"papal_name": ["Innocent III"], "include_contributions": [true]}}}
{"id": 260, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coverage_rate': 0. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon.", "function": {"name": "calculate_paint_needed", "description": "Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand.", "parameters": {"type": "dict", "properties": {"coverage_rate": {"type": "integer", "description": "The area in square feet that one gallon of paint can cover."}, "length": {"type": "integer", "description": "Length of the wall to be painted in feet."}, "height": {"type": "integer", "description": "Height of the wall to be painted in feet."}}, "required": ["coverage_rate", "length", "height"]}}}, "model_result_raw": "[calculate_paint_needed(coverage_rate=0, length=30, height=12)]", "model_result_decoded": [{"calculate_paint_needed": {"coverage_rate": 0, "length": 30, "height": 12}}], "possible_answer": {"calculate_paint_needed": {"coverage_rate": [400], "length": [30], "height": [12]}}}
{"id": 261, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': 'object'. Expected one of ['window']."], "error_type": "value_error:dict_value", "prompt": {"question": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft.", "function": {"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}}, "model_result_raw": "[paint_requirement.calculate(area={'width': 20, 'height': 12}, paint_coverage=350, exclusion={'type': 'object', 'area': 15})]", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"type": "object", "area": 15}}}], "possible_answer": {"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}}
{"id": 268, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month.", "function": {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}}, "model_result_raw": "[find_exhibition(location='New York', art_form='modern sculpture', month='')]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": ""}}], "possible_answer": {"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}}
{"id": 271, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'building_name': ': '. Expected one of ['Empire State Building', 'Empire State']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Can you give me the height and width of Empire State building in feet?", "function": {"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}}, "model_result_raw": "[building.get_dimensions(building_name=': ', unit='meter')]", "model_result_decoded": [{"building.get_dimensions": {"building_name": ": ", "unit": "meter"}}], "possible_answer": {"building.get_dimensions": {"building_name": ["Empire State Building", "Empire State"], "unit": ["feet"]}}}
{"id": 279, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'features' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Find me the average price and ratings of piano from Yamaha.", "function": {"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}}, "model_result_raw": "[get_instrument_details(instrument='piano', manufacturer='Yamaha')]", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha"}}], "possible_answer": {"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}}
{"id": 281, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'make': 'null'. Expected one of ['Violin', 'violin']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a Violin within my budget of $1000 with acoustic type.", "function": {"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}}, "model_result_raw": "[find_instrument(budget=1000, type='acoustic', make='null')]", "model_result_decoded": [{"find_instrument": {"budget": 1000, "type": "acoustic", "make": "null"}}], "possible_answer": {"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": ["Violin", "violin"]}}}
{"id": 283, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'brand': '\u2014\u2014'. Expected one of ['Yamaha']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale.", "function": {"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}}, "model_result_raw": "[find_flute(brand='\u2014\u2014', specs=['open hole', 'C foot', 'silver headjoint'])]", "model_result_decoded": [{"find_flute": {"brand": "\u2014\u2014", "specs": ["open hole", "C foot", "silver headjoint"]}}], "possible_answer": {"find_flute": {"brand": ["Yamaha"], "specs": [["open hole", "C foot", "silver headjoint"]]}}}
{"id": 285, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '>=2022-01-01'. Expected one of ['next month', '2023-06-01', '06/01/2023', 'Jun.1,2023', 'June 2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get information about the pop concerts in New York for next month.", "function": {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}}, "model_result_raw": "[concert_info.get(location='New York', date='>=2022-01-01', genre='Pop')]", "model_result_decoded": [{"concert_info.get": {"location": "New York", "date": ">=2022-01-01", "genre": "Pop"}}], "possible_answer": {"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}}
{"id": 286, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago, Illinois'. Expected one of ['Chicago', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a Rock concert in Chicago with ticket availability under $100.", "function": {"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}}, "model_result_raw": "[find_concert(location='Chicago, Illinois', price=50, genre='Rock')]", "model_result_decoded": [{"find_concert": {"location": "Chicago, Illinois", "price": 50, "genre": "Rock"}}], "possible_answer": {"find_concert": {"location": ["Chicago", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}}
{"id": 287, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'concert.get_details' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "Get concert details for the artist Beyonce performing in San Diego April 2022.", "function": {"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}}
{"id": 288, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '>this_weekend'. Expected one of ['this weekend']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a classical concert this weekend in Los Angeles with cheap tickets.", "function": {"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow, or date string."}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}}, "model_result_raw": "[concert.search(genre='classical', location='Los Angeles', date='>this_weekend', price_range='cheap')]", "model_result_decoded": [{"concert.search": {"genre": "classical", "location": "Los Angeles", "date": ">this_weekend", "price_range": "cheap"}}], "possible_answer": {"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}}
{"id": 294, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'track_length': 30. Expected one of [180]."], "error_type": "value_error:others", "prompt": {"question": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes.", "function": {"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}}, "model_result_raw": "[music_composer.create_mix(scale='C Major', note_duration='quarter', track_length=30)]", "model_result_decoded": [{"music_composer.create_mix": {"scale": "C Major", "note_duration": "quarter", "track_length": 30}}], "possible_answer": {"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}}
{"id": 299, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': ':\"C#\", '. Expected one of ['C#']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What key signature does C# major have?", "function": {"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}}, "model_result_raw": "[music_theory.key_signature(key=':\"C#\", ')]", "model_result_decoded": [{"music_theory.key_signature": {"key": ":\"C#\", "}}], "possible_answer": {"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}}
{"id": 305, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': '.'. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get point and rebound stats for player 'LeBron James' from last basketball game", "function": {"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}}, "model_result_raw": "[player_stats.getLastGame(player_name='LeBron James', team='.', metrics=['Points', 'Rebounds'])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "LeBron James", "team": ".", "metrics": ["Points", "Rebounds"]}}], "possible_answer": {"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}}
{"id": 309, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': ', '. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "What are the next five matches for Manchester United and who are they playing against in Premier League?", "function": {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}}, "model_result_raw": "[sports.match_schedule(team_name=', ', num_matches=5, league='')]", "model_result_decoded": [{"sports.match_schedule": {"team_name": ", ", "num_matches": 5, "league": ""}}], "possible_answer": {"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}}
{"id": 311, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'get_career_stats' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "What are the career stats of basketball player LeBron James?", "function": {"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}}
{"id": 318, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2021 regular'. Expected one of ['2021']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the ranking of LA Lakers in the NBA 2021 regular season.", "function": {"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}}, "model_result_raw": "[get_team_rank(team_name='LA Lakers', league='NBA', season='2021 regular', type='regular')]", "model_result_decoded": [{"get_team_rank": {"team_name": "LA Lakers", "league": "NBA", "season": "2021 regular", "type": "regular"}}], "possible_answer": {"get_team_rank": {"team_name": ["LA Lakers"], "league": ["NBA"], "season": ["2021"], "type": ["regular"]}}}
{"id": 324, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sport': './ woman tennis'. Expected one of ['tennis']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Who is ranked as the top player in woman tennis?", "function": {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}}, "model_result_raw": "[sports_ranking.get_top_player(sport='./ woman tennis', gender='./ women')]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "./ woman tennis", "gender": "./ women"}}], "possible_answer": {"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women", "female", "ladies"]}}}
{"id": 329, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': ': '. Expected one of ['Ticket to Ride']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the rating and player count of the board game 'Ticket to Ride'.", "function": {"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}}, "model_result_raw": "[boardgame.get_info(name=': ', parameters=['player count', 'rating'])]", "model_result_decoded": [{"boardgame.get_info": {"name": ": ", "parameters": ["player count", "rating"]}}], "possible_answer": {"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}}
{"id": 330, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'number': 5. Expected one of [7]."], "error_type": "value_error:others", "prompt": {"question": "Calculate the odds of rolling a 7 with two dice in the board game Monopoly.", "function": {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}}, "model_result_raw": "[monopoly_odds_calculator(number=5, dice_number=2, dice_faces=6)]", "model_result_decoded": [{"monopoly_odds_calculator": {"number": 5, "dice_number": 2, "dice_faces": 6}}], "possible_answer": {"monopoly_odds_calculator": {"number": [7], "dice_number": [2], "dice_faces": [6, ""]}}}
{"id": 338, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Function name 'poker_game_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"question": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?", "function": {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}}, "model_result_raw": "[error.message(error=\"Error occurred\")]", "model_result_decoded": [{"error.message": {"error": "Error occurred"}}], "possible_answer": {"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}}
{"id": 348, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\"Liverpool F.C.\"'. Expected one of ['Liverpool F.C.', 'Liverpool']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get me the details of the last game played by Liverpool F.C. Include its statistics.", "function": {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}}, "model_result_raw": "[soccer.get_last_match(team_name='\"Liverpool F.C.\"', include_stats=True)]", "model_result_decoded": [{"soccer.get_last_match": {"team_name": "\"Liverpool F.C.\"", "include_stats": true}}], "possible_answer": {"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}}
{"id": 352, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 5.5. Expected one of [4.5]."], "error_type": "value_error:others", "prompt": {"question": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10.", "function": {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}}, "model_result_raw": "[multiplayer_game_finder(platform='Windows 10', rating=5.5)]", "model_result_decoded": [{"multiplayer_game_finder": {"platform": "Windows 10", "rating": 5.5}}], "possible_answer": {"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action"]}}}
{"id": 353, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': ': '. Expected one of ['The Legend of Zelda: Breath of the Wild']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot.", "function": {"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}}, "model_result_raw": "[gamespot.getAverageUserScore(game_name=': ', platform=': ')]", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": ": ", "platform": ": "}}], "possible_answer": {"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}}
{"id": 355, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cooking_time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find a vegan soup recipe that takes under 30 minutes to make.", "function": {"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}}, "model_result_raw": "[get_vegan_recipe(dish_type='soup', cooking_time=29)]", "model_result_decoded": [{"get_vegan_recipe": {"dish_type": "soup", "cooking_time": 29}}], "possible_answer": {"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [["vegan"]]}}}
{"id": 356, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': ':\"Beef Lasagna\"'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?", "function": {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}}, "model_result_raw": "[recipe_info.get_calories(website='Foodnetwork.com', recipe=':\"Beef Lasagna\"')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": ":\"Beef Lasagna\""}}], "possible_answer": {"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}}
{"id": 357, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'prep_time': 29. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"question": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare.", "function": {"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}}, "model_result_raw": "[recipe_finder.find(servings=2, diet='vegan', prep_time=29)]", "model_result_decoded": [{"recipe_finder.find": {"servings": 2, "diet": "vegan", "prep_time": 29}}], "possible_answer": {"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}}
{"id": 361, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': '\u2014-pasta carbonara\u2014-'. Expected one of ['pasta carbonara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find a recipe for pasta carbonara which contains only less than 500 calories.", "function": {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}}, "model_result_raw": "[find_recipe(recipeName='\u2014-pasta carbonara\u2014-', maxCalories=499)]", "model_result_decoded": [{"find_recipe": {"recipeName": "\u2014-pasta carbonara\u2014-", "maxCalories": 499}}], "possible_answer": {"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}}
{"id": 363, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'review_rate': 0.8. Expected one of [4.0]."], "error_type": "value_error:others", "prompt": {"question": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?", "function": {"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}}, "model_result_raw": "[get_best_sushi_places(city='Tokyo', top=5, review_rate=0.8)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "Tokyo", "top": 5, "review_rate": 0.8}}], "possible_answer": {"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}}
{"id": 367, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'from_unit': 'tablespoons'. Expected one of ['tablespoon', 'tbsp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How many teaspoons are in 2 tablespoons for accurate measurement in my recipe?", "function": {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}}, "model_result_raw": "[recipe.unit_conversion(value=2, from_unit='tablespoons', to_unit='teaspoons')]", "model_result_decoded": [{"recipe.unit_conversion": {"value": 2, "from_unit": "tablespoons", "to_unit": "teaspoons"}}], "possible_answer": {"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [0, ""]}}}
{"id": 368, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find me a vegan recipe for brownies which prep time is under 30 minutes.", "function": {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}}, "model_result_raw": "[find_recipe(dietary_restrictions='vegan', recipe_type='brownies', time=30)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": {"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}}
{"id": 371, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['olive oil', 'olive oil', 'olive oil', 'rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto.", "function": {"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}}, "model_result_raw": "[safeway.order(location='Palo Alto', items=['olive oil', 'olive oil', 'olive oil', 'rice'], quantity=[3, 3, 3, 1])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto", "items": ["olive oil", "olive oil", "olive oil", "rice"], "quantity": [3, 3, 3, 1]}}], "possible_answer": {"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}}
{"id": 374, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack of bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability.", "function": {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}}, "model_result_raw": "[walmart.purchase(loc='San Jose', product_list=['apples', 'rice', '12 pack of bottled water'])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack of bottled water"]}}], "possible_answer": {"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}}
{"id": 376, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkins', 'pumpkins', 'pumpkins']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'egg']]."], "error_type": "value_error:list/tuple", "prompt": {"question": "Check the total price for three pumpkins and two dozen eggs at Walmart.", "function": {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}}, "model_result_raw": "[walmart.check_price(items=['pumpkins', 'pumpkins', 'pumpkins'], quantities=[3, 3, 3], store_location='')]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "pumpkins", "pumpkins"], "quantities": [3, 3, 3], "store_location": ""}}], "possible_answer": {"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "egg"]], "quantities": [[3, 24], [3, 2]], "store_location": ["Los Angeles", "LA"]}}}
{"id": 377, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'display_format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "What time is it currently in London, UK in 24 hour format?", "function": {"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}}, "model_result_raw": "[time_zone_converter(city='London', country='UK')]", "model_result_decoded": [{"time_zone_converter": {"city": "London", "country": "UK"}}], "possible_answer": {"time_zone_converter": {"city": ["London"], "country": ["UK", "United Kingdom"], "display_format": ["24h", "24 hour"]}}}
{"id": 381, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': 'March 10, 2023'. Expected one of ['2023-03-10', '03/10/2023', 'Mar.10,2023', 'March 10th, 2023', 'March 10th,2023', 'March10th, 2023', 'March10th,2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023.", "function": {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}}, "model_result_raw": "[hotel_booking(location='Manhattan, New York', room_type='single', duration=3, start_date='March 10, 2023', preferences=['pet_friendly'])]", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": "March 10, 2023", "preferences": ["pet_friendly"]}}], "possible_answer": {"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}}
{"id": 382, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"question": "Check if any Hilton Hotel is available for two adults in Paris from April 4th to April 8th?", "function": {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}}, "model_result_raw": "[hilton_hotel.check_availability(location='? diminutive Paris', check_in_date='? string '2023-04-04'', check_out_date='? string '2023-04-08'', no_of_adults=2, hotel_chain='? string 'Hilton'')]", "possible_answer": {"hilton_hotel.check_availability": {"location": ["Paris"], "check_in_date": ["2023-04-04", "04/04/2023", "Apr.4,2023", " April 4"], "check_out_date": ["2023-04-08", "04/08/2023", "Apr.8,2023"], "no_of_adults": [2], "hotel_chain": ["Hilton", ""]}}}
{"id": 383, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022.", "function": {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hilton', location='Chicago', room_type='single', start_date='10th December 2022', nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}}
{"id": 387, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Optional parameter 'view' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"question": "Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022.", "function": {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}}, "model_result_raw": "[book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury', start_date='05-12-2022', stay_duration=3)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hotel Paradise", "location": "Las Vegas", "room_type": "luxury", "start_date": "05-12-2022", "stay_duration": 3}}], "possible_answer": {"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}}
{"id": 388, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'The Plaza Hotel'. Expected one of ['Plaza Hotel']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022", "function": {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}}, "model_result_raw": "[hotel_booking(hotel_name='The Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04', rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "The Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": {"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York", "New York City", "New York City, NY", "NYC", "NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}}
{"id": 390, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type float, got int. Parameter value: 200."], "error_type": "type_error:simple", "prompt": {"question": "Calculate the current cost in British Pounds if I need to convert 200 US dollars.", "function": {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[currency_converter(base_currency='USD', target_currency='GBP', amount=200)]", "model_result_decoded": [{"currency_converter": {"base_currency": "USD", "target_currency": "GBP", "amount": 200}}], "possible_answer": {"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}}
{"id": 392, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'British pounds'. Expected one of ['GBP']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included.", "function": {"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}}, "model_result_raw": "[get_exchange_rate_with_fee(base_currency='British pounds', target_currency='Japanese yen', fee=0.02)]", "model_result_decoded": [{"get_exchange_rate_with_fee": {"base_currency": "British pounds", "target_currency": "Japanese yen", "fee": 0.02}}], "possible_answer": {"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}}
{"id": 394, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "How much will 20000 Japanese Yen be in United States Dollar?", "function": {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}}, "model_result_raw": "[convert_currency(base_currency='Japanese Yen', target_currency='United States Dollar', amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": {"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}}
{"id": 396, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': ':'. Expected one of ['Central Park, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"question": "Find the nearest parking lot within 2 miles of Central Park in New York.", "function": {"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}}, "model_result_raw": "[parking_lot.find_nearest(location=':', radius=2, type='')]", "model_result_decoded": [{"parking_lot.find_nearest": {"location": ":", "radius": 2, "type": ""}}], "possible_answer": {"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}}
{"id": 400, "model_name": "TheBloke_Mistral-7B-Instruct-v0.2-GPTQ", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"question": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards.", "function": {"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}}, "model_result_raw": "[restaurant_search(location='New York City, NY', cuisine='Italian', rating=5, accepts_credit_cards=True)]", "model_result_decoded": [{"restaurant_search": {"location": "New York City, NY", "cuisine": "Italian", "rating": 5, "accepts_credit_cards": true}}], "possible_answer": {"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}}